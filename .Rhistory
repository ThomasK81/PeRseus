install.packages("lda")
install.packages("LDAvis")
install.packages("shiny")
install.packages("XML")
install.packages("RCurl")
install.packages("plyr")
install.packages("tm")
library("shiny")
require("shiny")
require("tm")
library("shiny")
library("tm")
runUrl("https://github.com/ThomasK81/TopicModellingR/archive/master.zip", subdir = "/shiny/tmApp/")
runUrl("https://github.com/ThomasK81/TopicModellingR/archive/master.zip", subdir = "/shiny/tmApp/")
library(shiny)
runUrl("https://github.com/ThomasK81/TopicModellingR/archive/master.zip", subdir = "/shiny/tmApp/")
runUrl("https://github.com/ThomasK81/TopicModellingR/archive/master.zip", subdir = "/shiny/tmApp/")
requite(shiny)
require(shiny)
runUrl("https://github.com/ThomasK81/TopicModellingR/archive/master.zip", subdir = "/shiny/tmApp/")
require(shiny)
runUrl("https://github.com/ThomasK81/TopicModellingR/archive/master.zip", subdir = "/shiny/tmApp/")
load("~/OneDrive/PeRseus/bu.RData")
setwd("~/OneDrive/PeRseus")
View(theta)
theta_export <- data.frame(output_names, theta)
View(theta_export)
View(theta)
View(phi)
rownames(phi)
rownames(theta)
rownames(theta) <- output_names
View(theta)
View(theta)
rownames(theta)
colnames(theta)
phi.t <- t(phi)
View(phi.t)
View(phi.t[,1])
rownames(phi.t)
colnames(phi)
paste(head(phi.t.df[order(phi.t[,1],decreasing=TRUE),], n=7)[,1], sep="", collapse="_")
paste(head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7)[,1], sep="", collapse="_")
paste(rownames(head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7)[,1], sep="", collapse="_"))
View(head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7)[,1], sep="", collapse="_"))
head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7)[,1], sep="", collapse="_"))
phi.t[order(phi.t[,1],decreasing=TRUE),]
paste(rownames(head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7)[,1], sep="", collapse="_"))
paste(head(phi.t.df[order(phi.t[,1],decreasing=TRUE),], n=7)[,1], sep="", collapse="_")
head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7)
rownames(head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7))
paste(rownames(head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7)), sep="", collapse="_")
phi.t <- t(phi)
topicnames <- vector(mode="character", length=K)
for (i in 1:K){
topicnames[i] <- paste(rownames(head(phi.t[order(phi.t[,1],decreasing=TRUE),], n=7)), sep="", collapse="_")
}
topicnames
phi.t <- t(phi)
topicnames <- vector(mode="character", length=K)
for (i in 1:K){
topicnames[i] <- paste(rownames(head(phi.t[order(phi.t[,i],decreasing=TRUE),], n=7)), sep="", collapse="_")
}
topicnames
View(phi)
pathname_csv <- paste(tmtables_dir, "/", "/phi.rds", sep="")
pathname_rds <- paste(tmtables_dir, "/", "/phi.csv", sep="")
rownames(phi) <- topicnames
saveRDS(phi, file = pathname_rds)
write.csv(phi, file = pathname_csv)
View(phi)
pathname_csv <- paste(tmtables_dir, "/", "/theta.rds", sep="")
pathname_rds <- paste(tmtables_dir, "/", "/theta.csv", sep="")
rownames(theta) <- output_names
rownames(theta) <- topicnames
saveRDS(theta, file = pathname_rds)
write.csv(theta, file = pathname_csv)
pathname_csv <- paste(tmtables_dir, "/", "/theta.rds", sep="")
pathname_rds <- paste(tmtables_dir, "/", "/theta.csv", sep="")
rownames(theta) <- output_names
colnames(theta) <- topicnames
saveRDS(theta, file = pathname_rds)
write.csv(theta, file = pathname_csv)
View(theta)
research_corpusAbstracts <- list(phi = phi,
theta = theta,
doc.length = doc.length,
vocab = vocab,
term.frequency = term.frequency)
## create the JSON object to feed the visualization:
json <- createJSON(phi = research_corpusAbstracts$phi,
theta = research_corpusAbstracts$theta,
doc.length = research_corpusAbstracts$doc.length,
vocab = research_corpusAbstracts$vocab,
term.frequency = research_corpusAbstracts$term.frequency,
R = terms_shown)
## Visualise and start browser, sava output
serVis(json, out.dir = tmviz_dir, open.browser = FALSE)
library(tm)
library(XML)
library(RCurl)
library(plyr)
library(lda)
library(LDAvis)
library(compiler)
research_corpusAbstracts <- list(phi = phi,
theta = theta,
doc.length = doc.length,
vocab = vocab,
term.frequency = term.frequency)
## create the JSON object to feed the visualization:
json <- createJSON(phi = research_corpusAbstracts$phi,
theta = research_corpusAbstracts$theta,
doc.length = research_corpusAbstracts$doc.length,
vocab = research_corpusAbstracts$vocab,
term.frequency = research_corpusAbstracts$term.frequency,
R = terms_shown)
## Visualise and start browser, sava output
serVis(json, out.dir = tmviz_dir, open.browser = FALSE)
help(createJSON, package = "LDAvis")
RJSONIO::fromJSON(json)$topic.order
new.order <- RJSONIO::fromJSON(json)$topic.order
what <- phi[new.order,]
View(what)
rm(what)
what <- theta[,new.order]
View(what)
theta <- theta[,new.order]
## generate topicnames
phi.t <- t(phi)
topicnames <- vector(mode="character", length=K)
for (i in 1:K){
topicnames[i] <- paste(rownames(head(phi.t[order(phi.t[,i],decreasing=TRUE),], n=7)), sep="", collapse="_")
}
## get term-topic matrix
pathname_csv <- paste(tmtables_dir, "/", "/phi.rds", sep="")
pathname_rds <- paste(tmtables_dir, "/", "/phi.csv", sep="")
rownames(phi) <- topicnames
saveRDS(phi, file = pathname_rds)
write.csv(phi, file = pathname_csv)
## get document-topic matrix
pathname_csv <- paste(tmtables_dir, "/", "/theta.rds", sep="")
pathname_rds <- paste(tmtables_dir, "/", "/theta.csv", sep="")
rownames(theta) <- output_names
colnames(theta) <- topicnames
saveRDS(theta, file = pathname_rds)
write.csv(theta, file = pathname_csv)
pathname_rds <- paste(foldername, "/", filename_parsed, sep="")
saveRDS(corpus_parsed, file = pathname_rds)
pathname_csv <- paste(foldername, "/", filename_parsed_csv, sep="")
write.csv(corpus_parsed, file = pathname_csv)
authorwork <- tail(unlist(strsplit(requestURN, ":", fixed=TRUE)), n=1)
author <- unlist(strsplit(authorwork, ".", fixed=TRUE))[1]
work <- unlist(strsplit(authorwork, ".", fixed=TRUE))[2]
filename <- paste(work, ".rds", sep="")
filename_csv <- paste(work, ".csv", sep="")
filename_parsed <- paste(work, "_parsed.rds", sep="")
filename_stem  <- paste(work, "_stems.rds", sep="")
filename_parsed_csv <- paste(work, "_parsed.csv", sep="")
filename_stem_csv  <- paste(work, "_stems.csv", sep="")
pathname_rds <- paste(foldername, "/", filename, sep="")
saveRDS(corpus, file = pathname_rds)
pathname_csv <- paste(foldername, "/", filename_csv, sep="")
write.csv(corpus, file = pathname_csv)
pathname_rds <- paste(foldername, "/", filename_parsed, sep="")
saveRDS(corpus_parsed, file = pathname_rds)
pathname_csv <- paste(foldername, "/", filename_parsed_csv, sep="")
write.csv(corpus_parsed, file = pathname_csv)
pathname_rds <- paste(foldername, "/", filename_stem, sep="")
saveRDS(stem_dictionary, file = pathname_rds)
stem_dictionary_CSV <- vapply(stem_dictionary,
function(x){result <- paste(x, collapse = ";")
return(result)
},
character(1))
pathname_csv <- paste(foldername, "/", filename_stem_csv, sep="")
write.csv(stem_dictionary_CSV, file = pathname_csv)
filename_bug  <- paste(work, "_iobugs_", as.character(round(100*length(failure[,1])/length(corpus[,1]))),sep="")
pathname_csv <- paste(foldername, "/", filename_bug, ".csv", sep="")
pathname_rds <- paste(foldername, "/", filename_bug, ".rds", sep="")
saveRDS(failure, file = pathname_rds)
write.csv(failure, file = pathname_csv)
save.image("~/OneDrive/PeRseus/bu.RData")
View(theta)
distance <- dist(theta, method = "euclidean")
fit.distance <- hclust(distance, method = "ward.D")
pathname_pdf <- paste(tmtables_dir, "/", "/cluster.pdf", sep="")
pdf(pathname_pdf, width=200, height=15)
plot(fit.distance)
dev.off()
head(distance)
View(head(distance))
View(head(distance), n=100)
head(distance, n=100
)
266085/730
View(distance)
distance
distance["urn:cts:latinLit:phi1056.phi001.perseus-lat1:1.preface.2"]
distance[,"urn:cts:latinLit:phi1056.phi001.perseus-lat1:1.preface.2"]
distance[1]
distance[2]
names(distance)
colnames(distance)
rownames(distance)
names(distance)
which(distance == ""urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.12" ")
which(distance == urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.12")
which(name(distance) == urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.12")
which(names(distance) == urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.12")
which(names(distance) == "urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.12")
distance(730)
distance[730]
what <- as.data.frame(distance)
is.dist(distance)
is.list(distance)
is.matrix(distance)
is.character(distance)
plot(fit.distance)
corpus["urn:cts:latinLit:phi1056.phi001.perseus−lat1:1.preface.2",]
corpus[,"urn:cts:latinLit:phi1056.phi001.perseus−lat1:1.preface.2"]
which(corpus[,1] == "urn:cts:latinLit:phi1056.phi001.perseus−lat1:1.preface.2")
corpus[,1]
which(corpus[,1] == "urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.12")
which(corpus[,1] == "urn:cts:latinLit:phi1056.phi001.perseus−lat1:1.preface.2")
which(corpus[,1] == "urn:cts:latinLit:phi1056.phi001.perseus−lat1:1.preface.2")
which(corpus[,1] == "urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.preface.1")
View(corpus)
which(corpus[,1] == "urn:cts:latinLit:phi1056.phi001.perseus-lat1:1.preface.2)
which(corpus[,1] == "urn:cts:latinLit:phi1056.phi001.perseus-lat1:1.preface.2")
which(corpus[,1] == "urn:cts:latinLit:phi1056.phi001.perseus−lat1:1.preface.2")
which(corpus[2,2] == "urn:cts:latinLit:phi1056.phi001.perseus−lat1:1.preface.2")
corpus[2,2]
distance <- dist(theta, method = "euclidean")
fit.distance <- hclust(distance, method = "ward.D")
pathname_pdf <- paste(tmtables_dir, "/", "/euclideancluster.pdf", sep="")
pdf(pathname_pdf, width=200, height=15)
plot(fit.distance)
dev.off()
distance <- dist(theta, method = "euclidean")
fit.distance <- hclust(distance, method = "ward.D")
pathname_pdf <- paste(tmtables_dir, "/", "/euclideancluster_theta.pdf", sep="")
pdf(pathname_pdf, width=200, height=15)
plot(fit.distance)
dev.off()
distance_phi <- dist(phi.t, method = "euclidean")
fit.distance <- hclust(distance_phi, method = "ward.D")
pathname_pdf <- paste(tmtables_dir, "/", "/euclideancluster_phi.pdf", sep="")
pdf(pathname_pdf, width=200, height=15)
plot(fit.distance)
dev.off()
?cutree
what <- cutree(fit.distance, h = 6)
what
what <- cutree(fit.distance, k = 6)
what
distance <- dist(theta, method = "euclidean")
fit.distance <- hclust(distance, method = "ward.D")
pathname_pdf <- paste(tmtables_dir, "/", "/euclideancluster_theta.pdf", sep="")
pdf(pathname_pdf, width=200, height=15)
plot(fit.distance)
dev.off()
what <- cutree(fit.distance, k = 6)
what
which(cutree(fit.distance, k = 12)) == 1
which(cutree(fit.distance, k = 12) == 1)
which(cutree(fit.distance, k = 70) == 1)
name(which(cutree(fit.distance, k = 70) == 1))
names(which(cutree(fit.distance, k = 70) == 1))
names(which(cutree(fit.distance, k = 70) == 2))
cutree(fit.distance, k = 70)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.2"]
unname(cutree(fit.distance, k = 70)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.2"])
which(cutree(fit.distance, k = 70) == unname(cutree(fit.distance, k = 70)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.2"]))
names(which(cutree(fit.distance, k = 70) == unname(cutree(fit.distance, k = 70)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.2"])))
names(which(cutree(fit.distance, k = 100) == unname(cutree(fit.distance, k = 100)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:10.16.2"])))
names(which(cutree(fit.distance, k = 100) == unname(cutree(fit.distance, k = 100)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 200) == unname(cutree(fit.distance, k = 100)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 400) == unname(cutree(fit.distance, k = 100)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 900) == unname(cutree(fit.distance, k = 100)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 700) == unname(cutree(fit.distance, k = 100)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 730) == unname(cutree(fit.distance, k = 100)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 730) == unname(cutree(fit.distance, k = 730)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 200) == unname(cutree(fit.distance, k = 200)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
View(corpus[names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"]))), 2]
)
View(corpus[names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"]))),])
View(corpus[which(corpus[,1] == names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7")))),]
which(corpus[,1] == names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"))))
which(corpus[,1] == names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7")))
names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
corpus[names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"]))),]
corpus[,names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))]
which(corpus[,1] == names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"]))))
corpus[,1]
names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))
which(corpus[,1] %in% names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"]))))
corpus[which(corpus[,1] %in% names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))),]
View(corpus[which(corpus[,1] %in% names(which(cutree(fit.distance, k = 500) == unname(cutree(fit.distance, k = 500)["urn:cts:latinLit:phi1056.phi001.perseus-lat1:7.5.7"])))),])
?dist
theta[1,1]
print.dist(distance)
